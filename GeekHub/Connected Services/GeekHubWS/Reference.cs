//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeekHub.GeekHubWS {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GeekHubWS.TF_NETSoap")]
    public interface TF_NETSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FiltroSkus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet FiltroSkus(string categoriaId, string nombre, string precioMin, string precioMax, string orden);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/FiltroSkus", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> FiltroSkusAsync(string categoriaId, string nombre, string precioMin, string precioMax, string orden);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/loginFindByEmailAndPassword", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool loginFindByEmailAndPassword(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/loginFindByEmailAndPassword", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> loginFindByEmailAndPasswordAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/registerUser", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool registerUser(string idUser, string idRole, string password, string name, string lastName, string sex, string email, string admin, string register, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/registerUser", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> registerUserAsync(string idUser, string idRole, string password, string name, string lastName, string sex, string email, string admin, string register, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendEmail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SendEmail(string subject, string body);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/SendEmail", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SendEmailAsync(string subject, string body);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface TF_NETSoapChannel : GeekHub.GeekHubWS.TF_NETSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TF_NETSoapClient : System.ServiceModel.ClientBase<GeekHub.GeekHubWS.TF_NETSoap>, GeekHub.GeekHubWS.TF_NETSoap {
        
        public TF_NETSoapClient() {
        }
        
        public TF_NETSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TF_NETSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TF_NETSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TF_NETSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Data.DataSet FiltroSkus(string categoriaId, string nombre, string precioMin, string precioMax, string orden) {
            return base.Channel.FiltroSkus(categoriaId, nombre, precioMin, precioMax, orden);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> FiltroSkusAsync(string categoriaId, string nombre, string precioMin, string precioMax, string orden) {
            return base.Channel.FiltroSkusAsync(categoriaId, nombre, precioMin, precioMax, orden);
        }
        
        public bool loginFindByEmailAndPassword(string email, string password) {
            return base.Channel.loginFindByEmailAndPassword(email, password);
        }
        
        public System.Threading.Tasks.Task<bool> loginFindByEmailAndPasswordAsync(string email, string password) {
            return base.Channel.loginFindByEmailAndPasswordAsync(email, password);
        }
        
        public bool registerUser(string idUser, string idRole, string password, string name, string lastName, string sex, string email, string admin, string register, string status) {
            return base.Channel.registerUser(idUser, idRole, password, name, lastName, sex, email, admin, register, status);
        }
        
        public System.Threading.Tasks.Task<bool> registerUserAsync(string idUser, string idRole, string password, string name, string lastName, string sex, string email, string admin, string register, string status) {
            return base.Channel.registerUserAsync(idUser, idRole, password, name, lastName, sex, email, admin, register, status);
        }
        
        public string SendEmail(string subject, string body) {
            return base.Channel.SendEmail(subject, body);
        }
        
        public System.Threading.Tasks.Task<string> SendEmailAsync(string subject, string body) {
            return base.Channel.SendEmailAsync(subject, body);
        }
    }
}
